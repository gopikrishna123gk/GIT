1) What are Git and GitHub?

*) Git is an open-source and free distributed version control system developed to handle projects of all sizes quickly and efficiently.
*) GitHub uses Git to provide Internet hosting for version control and software development. It offers the functionality of distributed version control 
 and source code management, which is found in Git .

 2) What is a Git repository? Name some popular Git hosting services?

 *) Repositories contain a batch of files that are different versions of a project. These files are imported from the repositories into
 the local servers of users for further modifications and updates in the content
*)  A few popular Git hosting services are
   - GitHub
   - GitLab
   - Bitbucket
   - SourceForge

3) What is a version control system? Mention its types?

*) A version control system (VCS) is a software tool used to create different project versions and store them in a repository
All modifications to the code are recorded and tracked by the VCS
## Types of version control systems...
*) Local version control systems:- have a database that maintains all the file changes on disk under, revision control in a special format
*) Centralized version control systems:- contain one repository, and each user gets their own working copy
*) Distributed version control systems:- contain multiple repositories, each accessible to separate users with their own working copy

4)  What are the main differences between Git and SVN?

      Criteria	                                            Git                                                  SVN

Type of version control                                   Distributed	                                        Centralized
Access to networks	                                      Not mandatory	                                       Mandatory
Global revision number                                  	Not available	                                       Available
Content	Cryptographic                                     SHA-1 Hash	                                         No hashed content
## Here we list some of the most important differences between Git and SVN
*) When it comes to handling large files, Git is not preferred but SVN can handle multiple projects in the same repository
*) Git does not have ‘commits’ across multiple branches but SVN lets you create the folders on any location in the repository layout
*) You cannot commit changes in Git but SVN lets you create a tag as a branch and you can create multiple revisions under a root tag

5)  What are the advantages of using GIT?

## Here are some of the most important advantages of Git

*) Data redundancy and data replication is possible
*) It is a highly available service
*) For one repository we can have only one directory of Git
*) The network performance and disk utilization are excellent
*)It is very easy to collaborate on any project
*) We can work on any sort of project within the Git

6) What is the meaning of “Index” or “Staging Area” in GIT?

*) When we are making the commits, we can make changes to it, format it and review it in the intermediate area known as ‘Staging Area’ or ‘Index’

7) What is tagging in Git?

*) Tagging allows developers to mark all the important checkpoints through the course of their projects’ progress. Instead of commit IDs 
tag names can be used while commits are checked out and pushed to a remote repo.

8) What is forking in Git?

A repository copy is called a fork. So, forking allows one to experiment with changes without worrying about the original project.
This process is ideal for proposing changes to someone else’s projects.

9) What is the use of a Git clone?

*) The Git clone command lets us copy the existing Git repository. If we want to get a copy of he central repository then the best way to do it is using ‘cloning’.

10) What is cherry-pick in Git?

*) Git cherry-pick is a command that allows the picking of arbitrary Git commits by reference and adding them to the HEAD,
Cherry-picking is the process of picking a commit from one branch and applying it to another. It helps in undoing changes.

11) What is origin in Git?

Origin refers to the remote repository that a project was originally cloned from and is used instead of the original repository’s URL.
 This allows for easier referencing.

 12) What is the difference between git fetch and git pull?

 *) Git fetch retrieves new data from a remote repository but does not integrate it into our working files. It helps in checking 
 if any changes happened in the remote repository.It does not manipulate or destroy anything in the process.
 *) Git pull, on the other hand, updates the HEAD with the latest changes from the remote server and directly integrates it 
 it into the working copy files. Using git pull can end in merge conflict as it tries to merge remote changes with the local ones.

 13) Explain git checkout in Git?

 *) Git checkout allows for the switching of the HEAD. It can be used to restore the historic versions of files as well.
  The command operates upon files, commits, and branches.

  14) What does git rebase do?

  *) Rebasing is the reapplying of commits on top of another base trip. A sequence of commits is applied from distinct branches into the final commit, it is
   a linear process of merging and an alternative to the git merge command. Rebasing makes it seem like one has created a branch from a different commit. 

   15) What is the difference between git rebase and git merge?

   *) In git rebase, a feature branch is moved into a master. Git merge maintains the history by adding a new commit.

   16) What is revert in Git?

   *) The git revert command is a forward-moving undo operation. It is a safe way to undo changes as it will create a new commit  that inverses the
   changes instead of deleting or orphaning commits in the commit history.

   17) What is the difference between resetting and reverting?

   *) While git reset changes the state of the branch to a previous one by removing all of the states after the desired commit, 
    git revert does it through the creation of new reverting commits and keeping the original one intact.

    18) What is the difference between ‘git remote’ and ‘git clone’?

    *) Git remote adds a reference to a remote repository for further tracking. Git clone, like its name, clones an existing remote 
    repository and builds a new one.

    19) What is GIT stash?

    *) The Git stash will take the working directory in the current state and index it to put on the stack at a later stage so that what we get 
    is a clean working directory
    *) This means that if we are in the middle of some task and need to get a clean working directory and simultaneously we want to keep all
    our current edits, then we can use the Git stash

    20) How are fork, branch, and clone different from each other?

    *) Forking creates a copy of the original repository, and it remains in the GitHub account.
    *) cloning, the repository is copied to the local machine using Git
    *) Forking is used to propose changes to the repository owners. In cloning, the changes are directly pushed to the original repository,
    provided the user has write access. A branch occurs within a repository and is a way to  keep developing and modifying the software 
    without affecting the main project.

    21)  What is the difference between git reflog and log?

    *) The git log is a public record of the commit history for a branch. Reflog, on the other hand, is a private one of the repository’s local commits.
    *) Unlike reflog, the git log is a part of the Git repository and is replicated after a push, fetch, or pull. A developer cannot access a local
    repository’s reflog without having access to the computer where it is located.

    22) What is GIT stash drop?

    *) When we are finished with working on the stashed item or want to remove the list, we can use the Git stash drop. This will ensure that the
    item that is last added by default or any particular item can be removed from the argument.


    23) How to identify if a certain branch has been merged into master?

    *) Git branch –merged master – shows all branches that are merged into master
    *)  Git branch – merged – shows all branches that are merged into the head
    *)  Git branch – no-merged –shows all the branches that are not merged


    24) Why do we need branching in GIT?

    *) With the help of branching, we can have our own branch and we can also jump between various branches We can go to our previous
    work, at the same time keeping our recent work intact

    25)  What is HEAD in Git, and how many HEADs can be created in a repository?

    *) The reference to a commit object is called the HEAD. Every repository has a ‘Master’ which is the default head. There can be multiple heads in a repository.

    26) What is the regular way for branching in GIT?

    *) The best way to create a branch in GIT is to have one ‘main’ branch and then create another branch for implementing the changes the changes that we want to make
    This is extremely useful when there are a large number of developers working on a single project.

    27) State a way to create a new branch in Git?

    *) If we want to create a new feature into the main branch, then we can use the command ‘git merge’ or ‘git pull’.


    28) How do you define a ‘conflict’ in git?

    *) If we want to merge a commit there is a change in one place and the same change already exists then while merging 
    the Git will not be able to predict which is the change that needs to be taken precedence.

    29) How to resolve a conflict in Git?

    *) If we want to resolve a conflict in Git, then we need to edit the files for fixing the conflicting changes and then we can run
    “git add” to add the resolved files and after that we can run the ‘git commit’ for committing the repaired merge.

    30) What is a commit message?

    *) The command that is used to write a commit message is “git commit -a”.
    
    Now explain about -a flag by saying -a on the command line instructs git to commit the new content
    of all tracked files that have been modified. Also, mention you can use “git add <file>” before git commit -a 
    if new files need to be committed for the first time.

    31) How can you fix a broken commit?
    
    *) If you use git commit --amend without making any changes to the index, Git still allows
     you to edit the commit message if you like, or you can give the new message with the -m option.
    *) In order to fix any broken commit, use the command “git commit --amend”.
    When you run this command, you can fix the broken commit message in the editor.
    
    ## Discarding the Last Commit ..
    *) Suppose you make a commit, but then decide that you want ready to do that. You don't have a specific fix to make
    with git commit --amend; you just want to uncomment and continue working. This is simple; just do
    $ git reset HEAD~
    $ git reset HEAD~3
    *) HEAD~3 refers to the fourth commit back, because this numbering syntax starts at zero; HEAD and HEAD~0 are equivalent.
    *) When discarding more than one commit, some further options to git reset become useful

    32) What is ‘bare repository’ in Git?

    *) A “bare” repository in Git contains information about the version control and no working files (no tree) and it 
       doesn’t contain the special .git sub-directory. Instead, it contains all the contents of the .git sub-directory
       directly in the main directory itself, whereas the working directory consists of 
       *) A .git subdirectory with all the Git related revision history of your repository
       *) A working tree, or checked out copies of your project files.

  33) What is a ‘conflict’ in git?

  *) Git can handle on its own most merges by using its automatic merging features. There arises a conflict when
  two separate branches have made edits to the same line in a file, or when a file has been deleted in one branch
  but edited in the other. Conflicts are most likely to happen when working in a team environment.
  ## resolve merge conflicts
       *) General tools
           $ git status
           $ git log --merge
           $ git diff
      *) Tools for when git fails to start a merge
          *) $ git checkout
          *) $ git reset --mixed
      *) Tools for when git conflicts arise during a merge
           *) $ git merge --abort
           *) $ git reset
*)  How to Resolve Merge Conflicts in Git?
 ## There are a few steps that could reduce the steps needed to resolve merge conflicts in Git.
        *) Step 1: The easiest way to resolve a conflicted file is to open it and make any necessary changes.
        *) Step 2: After editing the file, we can use the git add a command to stage the new merged content.
        *) Step 3: The final step is to create a new commit with the help of the git commit command.
        *)Step 4: Git will create a new merge commit to finalize the merge.
        
*)  Types of Git Merge Conflicts 

    *)  Starting the Merge Process 
            If there are changes in the working directory’s stage area for the current project, merging won’t start. 
             In this case, conflicts happen due to pending changes that need to be stabilized using different Git commands.
    *) During the Merge Process
           The failure during the merge process indicates that there is a conflict between the local branch and the branch being merged.
             In this case, Git resolves as much as possible, but there are things that have to be resolved manually in the conflicted files.
              We will now go over resolving merge conflicts in Git.
 

  34) How is git instaweb used?

    *)  git instaweb’ is used to automatically direct a web browser and run a webserver with an interface into your local repository.
      $ git instaweb [--local] [--httpd=<httpd>] [--port=<port>]
       [--browser=<browser>]
      $ git instaweb [--start] [--stop] [--restart]
      
     
    

    


    


  
  
 



